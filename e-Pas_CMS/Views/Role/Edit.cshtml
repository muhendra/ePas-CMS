@model e_Pas_CMS.ViewModels.RoleAuditorEditViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <h3 class="fw-bold mb-4">Edit User Management</h3>

    <form asp-action="Edit" asp-route-id="@Model.AuditorId" method="post" class="row g-4">
        @* Hidden AuditorId *@
        <input type="hidden" name="AuditorId" value="@Model.AuditorId" />

        <div class="col-md-6">
            <label class="form-label">Username (Dipakai Login, ubah seperlunya)</label>
            <input type="text" name="UserName" class="form-control" value="@Model.UserName" required />
        </div>

        <div class="col-md-6">
            <label class="form-label">Nama Lengkap</label>
            <input type="text" name="AuditorName" class="form-control" value="@Model.AuditorName" required />
        </div>

        <div class="col-md-6">
            <label class="form-label">Handphone</label>
            <input type="text" name="Handphone" class="form-control" value="@Model.Handphone" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Email</label>
            <input type="email" name="Email" class="form-control" value="@Model.Email" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Password (Kosongkan jika tidak diubah)</label>
            <input type="password" name="Password" class="form-control" placeholder="Masukkan Password Baru" />
        </div>

        <div class="col-md-6">
            <label class="form-label">Nama Role</label>
            <button type="button" id="btnOpenRole" class="btn btn-outline-primary w-100">Pilih Role</button>
            <div id="RoleBadgeContainer" class="selected-display mt-2 d-flex flex-wrap gap-2">
                @foreach (var role in Model.SelectedRoleNames)
                {
                    <span class="badge bg-primary">@role</span>
                }
            </div>
            @* Generate multiple hidden inputs dynamically *@
            @foreach (var roleId in Model.SelectedRoleIds)
            {
                <input type="hidden" name="SelectedRoleIds" value="@roleId" />
            }
        </div>

        <div class="col-md-6">
            <label class="form-label">Region</label>
            <button type="button" id="btnOpenRegion" class="btn btn-outline-success w-100">Pilih Region</button>
            <div id="RegionBadgeContainer" class="selected-display mt-2 d-flex flex-wrap gap-2">
                @foreach (var region in Model.SelectedRegionNames)
                {
                    <span class="badge bg-primary">@region</span>
                }
            </div>
            @foreach (var regionId in Model.SelectedRegionIds)
            {
                <input type="hidden" name="SelectedRegionIds" value="@regionId" />
            }
        </div>

        <div class="col-md-6">
            <label class="form-label">SBM</label>
            <button type="button" id="btnOpenSbm" class="btn btn-outline-warning w-100">Pilih SBM</button>
            <div id="SbmBadgeContainer" class="selected-display mt-2 d-flex flex-wrap gap-2">
                @foreach (var sbm in Model.SelectedSbmNames)
                {
                    <span class="badge bg-primary">@sbm</span>
                }
            </div>
            @foreach (var sbmId in Model.SelectedSbmIds)
            {
                <input type="hidden" name="SelectedSbmIds" value="@sbmId" />
            }
        </div>

        <div class="col-12 text-end">
            <a href="@Url.Action("Index", "Role")" class="btn btn-secondary">Kembali</a>
            <button type="submit" class="btn btn-primary">Simpan Perubahan</button>
        </div>
    </form>
</div>

<!-- Role Modal -->
<div class="modal fade" id="roleModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title">Pilih Role</h5></div>
            <div class="modal-body">
                @foreach (var role in Model.RoleList)
                {
                    <div class="form-check">
                        <input class="form-check-input role-checkbox" type="checkbox" value="@role.Value" data-name="@role.Text">
                        <label class="form-check-label">@role.Text</label>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
                <button class="btn btn-primary" id="btnPilihRole">Pilih</button>
            </div>
        </div>
    </div>
</div>

<!-- Region Modal -->
<div class="modal fade" id="regionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title">Pilih Region</h5></div>
            <div class="modal-body">
                @foreach (var region in Model.RegionList)
                {
                    <div class="form-check">
                        <input class="form-check-input region-checkbox" type="checkbox" value="@region.Value" data-name="@region.Text">
                        <label class="form-check-label">@region.Text</label>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
                <button class="btn btn-primary" id="btnPilihRegion">Pilih</button>
            </div>
        </div>
    </div>
</div>

<!-- SBM Modal -->
<div class="modal fade" id="sbmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title">Pilih SBM</h5></div>
            <div class="modal-body">
                @foreach (var sbm in Model.SbmList)
                {
                    <div class="form-check">
                        <input class="form-check-input sbm-checkbox" type="checkbox" value="@sbm.Value" data-name="@sbm.Text"
                        @(Model.SelectedSbmIds.Contains(sbm.Value) ? "checked" : "")>
                        <label class="form-check-label">@sbm.Text</label>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
                <button class="btn btn-warning" id="btnPilihSbm">Pilih</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        $(document).ready(function () {
            $('#btnOpenRole').click(function () {
                var selectedIds = $('input[name="SelectedRoleIds"]').map(function () { return this.value; }).get();
                $('.role-checkbox').each(function () {
                    $(this).prop('checked', selectedIds.includes($(this).val()));
                });
                var modal = new bootstrap.Modal(document.getElementById('roleModal'));
                modal.show();
            });

            $('#btnOpenRegion').click(function () {
                var selectedIds = $('input[name="SelectedRegionIds"]').map(function () { return this.value; }).get();
                $('.region-checkbox').each(function () {
                    $(this).prop('checked', selectedIds.includes($(this).val()));
                });
                var modal = new bootstrap.Modal(document.getElementById('regionModal'));
                modal.show();
            });

            $('#btnPilihRole').click(function () {
                var selected = $('.role-checkbox:checked');
                var ids = selected.map(function () { return this.value; }).get();
                var names = selected.map(function () { return $(this).data('name'); }).get();

                // Clear existing hidden inputs
                $('input[name="SelectedRoleIds"]').remove();

                // Add new hidden inputs
                ids.forEach(id => {
                    $('<input>').attr({ type: 'hidden', name: 'SelectedRoleIds', value: id }).appendTo('form');
                });

                updateBadge('RoleBadgeContainer', names);
                bootstrap.Modal.getInstance(document.getElementById('roleModal')).hide();
            });

            $('#btnPilihRegion').click(function () {
                var selected = $('.region-checkbox:checked');
                var ids = selected.map(function () { return this.value; }).get();
                var names = selected.map(function () { return $(this).data('name'); }).get();

                // Clear existing hidden inputs
                $('input[name="SelectedRegionIds"]').remove();

                // Add new hidden inputs
                ids.forEach(id => {
                    $('<input>').attr({ type: 'hidden', name: 'SelectedRegionIds', value: id }).appendTo('form');
                });

                updateBadge('RegionBadgeContainer', names);
                bootstrap.Modal.getInstance(document.getElementById('regionModal')).hide();
            });

            $('#btnOpenSbm').click(function () {
                var selectedIds = $('input[name="SelectedSbmIds"]').map(function () { return this.value; }).get();
                $('.sbm-checkbox').each(function () {
                    $(this).prop('checked', selectedIds.includes($(this).val()));
                });
                var modal = new bootstrap.Modal(document.getElementById('sbmModal'));
                modal.show();
            });

            $('#btnPilihSbm').click(function () {
                var selected = $('.sbm-checkbox:checked');
                var ids = selected.map(function () { return this.value; }).get();
                var names = selected.map(function () { return $(this).data('name'); }).get();
            
                // Clear existing hidden inputs
                $('input[name="SelectedSbmIds"]').remove();
            
                // Add new hidden inputs
                ids.forEach(id => {
                    $('<input>').attr({ type: 'hidden', name: 'SelectedSbmIds', value: id }).appendTo('form');
                });
            
                updateBadge('SbmBadgeContainer', names);
                bootstrap.Modal.getInstance(document.getElementById('sbmModal')).hide();
            });


            function updateBadge(containerId, items) {
                const container = document.getElementById(containerId);
                container.innerHTML = '';
                items.forEach(item => {
                    const badge = document.createElement('span');
                    badge.className = 'badge bg-primary';
                    badge.innerText = item;
                    container.appendChild(badge);
                });
            }
        });
    </script>
}