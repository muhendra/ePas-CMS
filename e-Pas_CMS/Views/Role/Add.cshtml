@using Newtonsoft.Json
@model e_Pas_CMS.ViewModels.RoleAuditorAddViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <title>Add UserManagement</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8fafc;
            padding: 40px;
        }

        .form-label {
            font-weight: 600;
        }

        .selected-display {
            font-weight: 500;
            color: #0d6efd;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="mb-4">
            <h2 class="fw-bold">Add User</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">Dashboard</li>
                    <li class="breadcrumb-item active text-primary" aria-current="page">Role</li>
                </ol>
            </nav>
        </div>

        <form method="post" asp-action="Add">
            <div class="row g-4">
                <div class="col-md-6">
                    <label class="form-label">Nama</label>
                    <input type="text" name="Name" class="form-control" placeholder="Masukkan Nama Lengkap" required />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Username</label>
                    <input type="text" name="Username" class="form-control" placeholder="Masukkan Username" required />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Password</label>
                    <input type="password" name="Password" class="form-control" placeholder="Masukkan Password" required />
                </div>


                <div class="col-md-6">
                    <label class="form-label">Handphone</label>
                    <input type="text" name="Handphone" class="form-control" placeholder="Masukkan No Handphone" required />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Email</label>
                    <input type="email" name="Email" class="form-control" placeholder="Masukkan Email" required />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Pilih Role</label>
                    <button type="button" id="btnOpenRole" class="btn btn-outline-primary w-100 d-flex align-items-center justify-content-center gap-2 rounded-pill shadow-sm py-2 px-3">
                        <i class="bi bi-people"></i> Pilih Role
                    </button>
                    <div id="RoleBadgeContainer" class="selected-display mt-2 d-flex flex-wrap gap-2"></div>
                    <input type="hidden" id="SelectedRoleIds" name="SelectedRoleIds" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Pilih Region</label>
                    <button type="button" id="btnOpenRegion" class="btn btn-outline-success w-100 d-flex align-items-center justify-content-center gap-2 rounded-pill shadow-sm py-2 px-3">
                        <i class="bi bi-geo-alt"></i> Pilih Region
                    </button>
                    <div id="RegionBadgeContainer" class="selected-display mt-2 d-flex flex-wrap gap-2"></div>
                    <input type="hidden" id="SelectedRegionIds" name="SelectedRegionIds" />
                </div>
                
                <div class="col-md-6">
                    <label class="form-label">Pilih SBM</label>
                    <button type="button" id="btnOpenSbm" class="btn btn-outline-warning w-100 d-flex align-items-center justify-content-center gap-2 rounded-pill shadow-sm py-2 px-3">
                        <i class="bi bi-person-badge"></i> Pilih SBM
                    </button>
                    <div id="SbmBadgeContainer" class="selected-display mt-2 d-flex flex-wrap gap-2"></div>
                    <input type="hidden" id="SelectedSbmIds" name="SelectedSbmIds" />
                </div>

                <!-- SPBU (Tampil jika DEFAULT_SPBU dipilih) -->
                <div class="col-md-6 d-none" id="spbuSection">
                    <label class="form-label">Pilih SPBU</label>
                    <button type="button" id="btnOpenSpbu" class="btn btn-outline-dark w-100 d-flex align-items-center justify-content-center gap-2 rounded-pill shadow-sm py-2 px-3">
                        <i class="bi bi-fuel-pump"></i> Pilih SPBU
                    </button>
                    <div id="SpbuBadgeContainer" class="selected-display mt-2 d-flex flex-wrap gap-2"></div>
                    <input type="hidden" id="SelectedSpbuId" name="SelectedSpbuId" />
                </div>


            </div>

            <div class="mt-4 text-end">
                <a href="@Url.Action("Index", "Role")" class="btn btn-secondary px-4 py-2">
                    <i class="bi bi-arrow-left-circle"></i> Kembali
                </a>
                <button type="submit" class="btn btn-info text-white px-4 py-2">
                    <i class="bi bi-plus-circle"></i> Add User
                </button>
            </div>
        </form>

    </div>

    <!-- Role Modal -->
    <div class="modal fade" id="roleModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header"><h5 class="modal-title">Pilih Role</h5></div>
                <div class="modal-body">
                    @foreach (var role in Model.RoleList)
                    {
                        <div class="form-check">
                            <input class="form-check-input role-checkbox" type="checkbox" value="@role.Value" data-name="@role.Text">
                            <label class="form-check-label">@role.Text</label>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
                    <button class="btn btn-primary" id="btnPilihRole">Pilih</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Region Modal -->
    <div class="modal fade" id="regionModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header"><h5 class="modal-title">Pilih Region</h5></div>
                <div class="modal-body">
                    @foreach (var region in Model.RegionList)
                    {
                        <div class="form-check">
                            <input class="form-check-input region-checkbox" type="checkbox" value="@region.Value" data-name="@region.Text">
                            <label class="form-check-label">@region.Text</label>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
                    <button class="btn btn-primary" id="btnPilihRegion">Pilih</button>
                </div>
            </div>
        </div>
    </div>

    <!-- SPBU Modal with Search + Pagination -->
    <div class="modal fade" id="spbuModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Pilih SPBU</h5>
                </div>
                <div class="modal-body">
                    <!-- Search Box -->
                    <input type="text" class="form-control mb-3" id="spbuSearchInput" placeholder="Cari SPBU...">

                    <!-- List SPBU Radio -->
                    <div id="spbuListContainer" class="form-check-container mb-3"></div>

                    <!-- Pagination -->
                    <nav>
                        <ul class="pagination justify-content-center" id="spbuPagination"></ul>
                    </nav>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
                    <button class="btn btn-dark" id="btnPilihSpbu">Pilih</button>
                </div>
            </div>
        </div>
    </div>



    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const spbuData = @Html.Raw(JsonConvert.SerializeObject(Model.SpbuList));
        let filteredSpbu = [...spbuData];
        let spbuCurrentPage = 1;
        const spbuPerPage = 10;

        document.addEventListener('DOMContentLoaded', () => {
            // === BIND OPEN MODALS ===
            document.getElementById('btnOpenRole')?.addEventListener('click', () => {
                new bootstrap.Modal(document.getElementById('roleModal')).show();
            });

            document.getElementById('btnOpenRegion')?.addEventListener('click', () => {
                new bootstrap.Modal(document.getElementById('regionModal')).show();
            });

            document.getElementById('btnOpenSbm')?.addEventListener('click', () => {
                new bootstrap.Modal(document.getElementById('sbmModal')).show();
            });

            document.getElementById('btnOpenSpbu')?.addEventListener('click', () => {
                spbuCurrentPage = 1;
                filteredSpbu = [...spbuData];
                renderSpbuList();
                new bootstrap.Modal(document.getElementById('spbuModal')).show();
            });

            // === ROLE ===
            document.getElementById('btnPilihRole')?.addEventListener('click', () => {
                const selected = Array.from(document.querySelectorAll('.role-checkbox:checked'));
                const ids = selected.map(x => x.value);
                const names = selected.map(x => x.getAttribute('data-name'));
                document.getElementById('SelectedRoleIds').value = ids.join(',');
                updateBadge('RoleBadgeContainer', names);
                checkDefaultSpbuRole();
                bootstrap.Modal.getInstance(document.getElementById('roleModal')).hide();
            });

            // === REGION ===
            document.getElementById('btnPilihRegion')?.addEventListener('click', () => {
                const selected = Array.from(document.querySelectorAll('.region-checkbox:checked'));
                const ids = selected.map(x => x.value);
                const names = selected.map(x => x.getAttribute('data-name'));
                document.getElementById('SelectedRegionIds').value = ids.join(',');
                updateBadge('RegionBadgeContainer', names);
                bootstrap.Modal.getInstance(document.getElementById('regionModal')).hide();
            });

            // === SBM ===
            document.getElementById('btnPilihSbm')?.addEventListener('click', () => {
                const selected = Array.from(document.querySelectorAll('.sbm-checkbox:checked'));
                const ids = selected.map(x => x.value);
                const names = selected.map(x => x.getAttribute('data-name'));
                document.getElementById('SelectedSbmIds').value = ids.join(',');
                updateBadge('SbmBadgeContainer', names);
                bootstrap.Modal.getInstance(document.getElementById('sbmModal')).hide();
            });

            // === SPBU ===
            document.getElementById('btnPilihSpbu')?.addEventListener('click', () => {
                const selected = document.querySelector('.spbu-radio:checked');
                if (selected) {
                    document.getElementById('SelectedSpbuId').value = selected.value;
                    updateBadge('SpbuBadgeContainer', [selected.getAttribute('data-name')]);
                }
                bootstrap.Modal.getInstance(document.getElementById('spbuModal')).hide();
            });

            document.getElementById('spbuSearchInput')?.addEventListener('input', function () {
                const keyword = this.value.toLowerCase();
                filteredSpbu = spbuData.filter(x => (x.Text || '').toLowerCase().includes(keyword));
                spbuCurrentPage = 1;
                renderSpbuList();
            });

            // Initial role check
            checkDefaultSpbuRole();
        });

        function checkDefaultSpbuRole() {
            const selected = Array.from(document.querySelectorAll('.role-checkbox:checked'));
            const hasDefaultSpbu = selected.some(x => (x.getAttribute('data-name') || '').trim().toUpperCase() === 'DEFAULT_SPBU');
            document.getElementById('spbuSection')?.classList.toggle('d-none', !hasDefaultSpbu);
        }

        function updateBadge(containerId, items) {
            const container = document.getElementById(containerId);
            container.innerHTML = '';
            items.forEach(item => {
                const badge = document.createElement('span');
                badge.className = 'badge bg-primary me-1';
                badge.innerText = item;
                container.appendChild(badge);
            });
        }

                function renderSpbuList() {
            const listContainer = document.getElementById('spbuListContainer');
            const pagination = document.getElementById('spbuPagination');
            listContainer.innerHTML = '';
            pagination.innerHTML = '';

            const totalPages = Math.ceil(filteredSpbu.length / spbuPerPage);
            const start = (spbuCurrentPage - 1) * spbuPerPage;
            const end = start + spbuPerPage;
            const pageItems = filteredSpbu.slice(start, end);

            // Render SPBU radio list
            pageItems.forEach(spbu => {
                const div = document.createElement('div');
                div.className = 'form-check';
                div.innerHTML = `
                    <input class="form-check-input spbu-radio" type="radio" name="spbuRadio" value="${spbu.Value}" data-name="${spbu.Text}">
                    <label class="form-check-label">${spbu.Text}</label>
                `;
                listContainer.appendChild(div);
            });

            // Helper: render pagination item
            const createPageItem = (text, page, isActive = false, isDisabled = false) => {
                const li = document.createElement('li');
                li.className = 'page-item' + (isActive ? ' active' : '') + (isDisabled ? ' disabled' : '');
                li.innerHTML = `<a class="page-link" href="#">${text}</a>`;
                if (!isDisabled) {
                    li.addEventListener('click', (e) => {
                        e.preventDefault();
                        spbuCurrentPage = page;
                        renderSpbuList();
                    });
                }
                return li;
            };

            // Smart pagination range
            let startPage = Math.max(1, spbuCurrentPage - 2);
            let endPage = Math.min(totalPages, spbuCurrentPage + 2);

            if (spbuCurrentPage <= 3) {
                startPage = 1;
                endPage = Math.min(5, totalPages);
            } else if (spbuCurrentPage + 2 > totalPages) {
                startPage = Math.max(1, totalPages - 4);
                endPage = totalPages;
            }

            // First & Prev
            pagination.appendChild(createPageItem('«', 1, false, spbuCurrentPage === 1));
            pagination.appendChild(createPageItem('‹', spbuCurrentPage - 1, false, spbuCurrentPage === 1));

            // Numbered pages
            for (let i = startPage; i <= endPage; i++) {
                pagination.appendChild(createPageItem(i, i, i === spbuCurrentPage));
            }

            // Next & Last
            pagination.appendChild(createPageItem('›', spbuCurrentPage + 1, false, spbuCurrentPage === totalPages));
            pagination.appendChild(createPageItem('»', totalPages, false, spbuCurrentPage === totalPages));
        }
    </script>


</body>
</html>
