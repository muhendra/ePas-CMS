@using e_Pas_CMS.ViewModels
@model DetailAuditViewModel

@{
    ViewData["Title"] = "Detail Hasil Audit";
}

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

<h3 class="mb-4 fw-bold">Detail Hasil Audit</h3>

<div class="mb-3">
    <a href="#" class="text-decoration-none">Review Audit /</a>
    <span class="text-primary fw-semibold">Detail hasil audit - @Model.ReportNo</span>
</div>

<div class="rounded p-3 mb-4 text-center fw-bold text-white fs-4" style="background-color: #10B981;">
    @(Model.Status.ToUpper() == "PASS" ? "CERTIFIED" : Model.Status.ToUpper())
</div>

<div class="row g-4 mb-5 p-4 bg-light rounded shadow-sm">
    <div class="col-md-4">
        <strong class="d-block">No. Report</strong>
        <span>@Model.ReportNo</span>
    </div>
    <div class="col-md-4">
        <strong class="d-block">Nama Auditor</strong>
        <span>@Model.NamaAuditor</span>
    </div>
    <div class="col-md-4">
        <strong class="d-block">Tanggal Submit</strong>
        <span>@Model.TanggalSubmit?.ToString("dd/MM/yyyy, HH:mm")</span>
    </div>
    <div class="col-md-4">
        <strong class="d-block">Nomor SPBU</strong>
        <span>@Model.SpbuNo</span>
    </div>
    <div class="col-md-4">
        <strong class="d-block">Provinsi SPBU</strong>
        <span>@Model.Provinsi</span>
    </div>
    <div class="col-md-4">
        <strong class="d-block">Kabupaten/Kota SPBU</strong>
        <span>@Model.Kota</span>
    </div>
    <div class="col-md-12">
        <strong class="d-block">Alamat SPBU</strong>
        <span>@Model.Alamat</span>
    </div>
</div>

<ul class="list-unstyled">
    @foreach (var node in Model.Elements)
    {
        RenderChecklistNode(node, 0);
    }
</ul>

<div class="text-end mt-5">
    <button class="btn btn-primary rounded-pill px-4 py-2" data-bs-toggle="modal" data-bs-target="#confirmModal">
        Setujui Laporan Audit
    </button>
</div>

<!-- Modal Konfirmasi -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Konfirmasi Persetujuan</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
            </div>
            <div class="modal-body">
                Apakah Anda yakin ingin menyetujui laporan audit ini?
            </div>
            <div class="modal-footer">
                <form method="post" asp-action="Approve" asp-route-id="@Context.Request.RouteValues["id"]">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                    <button type="submit" class="btn btn-primary">Ya, Setujui</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        .rotate-arrow {
            transition: transform 0.3s ease;
        }

            .rotate-arrow.rotate {
                transform: rotate(90deg);
            }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('[data-bs-toggle="collapse"]').forEach(function (toggle) {
                var targetId = toggle.getAttribute('href') || toggle.dataset.bsTarget;
                var target = document.querySelector(targetId);
                const arrow = toggle.querySelector('.rotate-arrow');
                if (!target || !arrow) return;

                target.addEventListener('show.bs.collapse', function () {
                    arrow.classList.add('rotate');
                });
                target.addEventListener('hide.bs.collapse', function () {
                    arrow.classList.remove('rotate');
                });
            });
        });
    </script>
}

@functions {
    decimal ExtractDecimalFromOption(string opt)
    {
        var match = System.Text.RegularExpressions.Regex.Match(opt, "\\((.*?)\\)");
        return match.Success && decimal.TryParse(match.Groups[1].Value, out var val) ? val : 0;
    }

    void RenderChecklistNode(AuditChecklistNode node, int level)
    {
        var collapseId = $"collapse-{node.Id}";
        <li class="mb-3 ps-@(level * 3)">
            <div class="card border-secondary">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <a class="fw-bold text-dark text-decoration-none d-flex justify-content-between align-items-center w-100"
                       data-bs-toggle="collapse"
                       href="#@collapseId"
                       role="button" aria-expanded="false" aria-controls="@collapseId">
                        <div>
                            <span>@node.Title</span><br />
                            @if (!string.IsNullOrWhiteSpace(node.Description))
                            {
                                <small class="text-muted">@node.Description</small>
                            }
                        </div>
                        <div class="text-end">
                            <div class="small">Skor:</div>
                            <strong>@(node.ScoreAF?.ToString("0.00") ?? "0.00")</strong>
                            <i class="bi bi-chevron-right rotate-arrow ms-2"></i>
                        </div>
                    </a>
                </div>
                <div class="collapse" id="@collapseId">
                    <div class="card-body">
                        @if (!string.IsNullOrWhiteSpace(node.ScoreInput))
                        {
                            <div class="mb-2">
                                <div class="mb-1 fw-semibold">Jawaban:</div>
                                @foreach (var opt in new List<string> { "A (2,00)", "B (1,50)", "C (1,00)", "D (0,50)", "F (0,00)" })
                                {
                                    var optionValue = ExtractDecimalFromOption(opt);
                                    var isActive = decimal.TryParse(node.ScoreInput, out var actual) && optionValue == actual;
                                    <button class="btn btn-outline-secondary btn-sm me-2 @(isActive ? "active bg-success text-white" : "")">
                                        @opt
                                    </button>
                                }
                            </div>
                            <div>
                                <button class="btn btn-light btn-sm me-2">Batal</button>
                                <button class="btn btn-primary btn-sm">Update Nilai</button>
                            </div>
                        }

                        @if (!string.IsNullOrWhiteSpace(node.MediaUrl))
                        {
                            <div class="mt-3">
                                <a href="@node.MediaUrl" target="_blank" class="btn btn-sm btn-link">📷 Lihat Dokumentasi Foto</a>
                            </div>
                        }

                        @if (node.Children.Any())
                        {
                            <ul class="list-unstyled mt-3">
                                @foreach (var child in node.Children)
                                {
                                    RenderChecklistNode(child, level + 1);
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        </li>
    }
}